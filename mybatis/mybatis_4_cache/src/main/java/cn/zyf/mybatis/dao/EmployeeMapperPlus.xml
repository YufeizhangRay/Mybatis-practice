<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="cn.zyf.mybatis.dao.EmployeeMapperPlus">
 	
 	<!-- 自定义某个javaBean的封装规则 
 		type：自定义的Java类型
 		id：唯一id，方便引用
 	-->
 	<resultMap type="cn.zyf.mybatis.bean.Employee" id="MySimpleEmp">
 		<!-- 指定主键列的封装规则 
 			id定义主键底层会有优化
 			column：指定哪一列
 			property：指定对应的javaBean属性
 		-->
 		<id column="id" property="id"/>
 		<!-- 定义普通列封装规则 -->
 		<result column="last_name" property="lastName"/>
 		<!-- 其他不指定的列也会自动封装：我们只要写resultMap就要全部的映射规则都写上 -->
 		<result column="email" property="email"/>
 		<result column="gender" property="gender"/>
 	</resultMap>
 	
 	<!-- resultMap:自定义结果集的映射规则 -->
 	<!-- public Employee getEmployeeById(Integer id); -->
 	<select id="getEmployeeById" resultMap="MySimpleEmp">
 		select * from tbl_employee where id=#{id}
 	</select>
 	
 	<!-- 
    场景一：
    	查询Employee的同时查询员工对应的部门
    	Employee====Department
    	一个员工有一个部门
     -->
     
    <!-- 
    	联合查询：级联属性封装结果集
     -->
    <resultMap type="cn.zyf.mybatis.bean.Employee" id="MyDifEmp">
    	<id column="id" property="id"/>
 		<result column="last_name" property="lastName"/>
 		<result column="email" property="email"/>
 		<result column="gender" property="gender"/>
 		<result column="did" property="dept.id"/>
 		<result column="dept_name" property="dept.departmentName"/>
    </resultMap>
    
    <!-- 
    	使用association定义关联的单个对象的封装规则
     -->
    <resultMap type="cn.zyf.mybatis.bean.Employee" id="MyDifEmp2">
    	<id column="id" property="id"/>
 		<result column="last_name" property="lastName"/>
 		<result column="email" property="email"/>
 		<result column="gender" property="gender"/>
 		<!-- association可以指定联合的javaBean对象 
 			property：指定哪个属性是联合的对象
 			javaType：指定这个属性对象的类型，不能省略
 		-->
 		<association property="dept" javaType="cn.zyf.mybatis.bean.Department">
 			<id column="id" property="id"/>
 			<result column="dept_name" property="departmentName"/>
 		</association>
    </resultMap>
    
    <!-- public Employee getEmployeeAndDept(Integer id); -->
    <select id="getEmployeeAndDept" resultMap="MyDifEmp2">
    	select e.id id,e.last_name last_name,e.email email,e.gender gender,e.d_id d_id,
    	d.id did,d.dept_name dept_name from tbl_employee e,tbl_dept d
    	where e.d_id=d.id and e.id=#{id}
    </select>
    
     <!-- 使用association进行分步查询
    	1.先按照员工id查询员工信息
    	2.根据员工信息中的d_id值去部门表查出部门信息
    	3.把查出的部门设置到员工信息里面
     -->
     <resultMap type="cn.zyf.mybatis.bean.Employee" id="MyEmpByStep">
    	<id column="id" property="id"/>
 		<result column="last_name" property="lastName"/>
 		<result column="email" property="email"/>
 		<result column="gender" property="gender"/> 
 		<!-- association定义关联对象的封装规则 
 			select:表名当前属性是调用select指定的方法查出结果的
 			column:指定将哪一列的值传给这个方法
 			
 			流程：使用select指定的方法（传入column指定的这列参数）查出对象，并封装给property指定的属性
 		-->
 		<association property="dept" 
 			select="cn.zyf.mybatis.dao.DepartmentMapper.getDeaprtmentById"
 			column="d_id">
 		</association>
     </resultMap>
     <!-- public Employee getEmployeeByIdStep(Integer id); -->
     <select id="getEmployeeByIdStep" resultMap="MyEmpByStep">
    	select * from tbl_employee where id=#{id}
    </select>
    
    <!-- 可以使用延迟加载 
    	
    	<setting name="lazyLodingEnabled" value="true"/>
		<setting name="aggressiveLazyLoding" value="false"/>
    -->
   <!-- =========================association========================== -->
   
   <!-- 
    场景一：
    	查询部门的同时查询部门内所有的员工
    	在DepartmentMapper.xml中
    	一个部门有多个员工
     -->
     
    <!-- public List<Employee> getEmployeeByDeptId(Integer deptId); -->
    <select id="getEmployeeByDeptId" resultType="cn.zyf.mybatis.bean.Employee">
    	select * from tbl_employee where d_id=#{deptId}
    </select>
 </mapper>