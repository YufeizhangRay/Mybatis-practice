<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zyf.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- 
		if 判断
		choose(where,otherwise):分支选择 带了break的switch-case
			如果带了id就用id查，如果带了last_name就用last_name查只会进入其中一个
		trim 字符串截取(where(封装查询条件),set(封装修改条件))
		foreach
	 -->
	<!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 -->
	<!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf"
		resultType="cn.zyf.mybatis.bean.Employee">
		select * from tbl_employee
		<!-- where -->
		<where>
			<!-- test:判断表达式(OGNL) 
			参照官方文档 
			c:if test 
			从参数中取值进行判断 
			遇见特殊符号应该写转义字符 -->
			<if test="id!=null">
				id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=''">
				and email=#{email}
			</if>
			<!-- OGNL会进行字符串与数字的转换判断 -->
			<if test="gender==0 or gender==1">
				and gender=#{gender}
			</if>
		</where>
	</select>
	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim"
		resultType="cn.zyf.mybatis.bean.Employee">
		select * from tbl_employee
		<!-- 后面多出的and或者or where标签不能解决 
			trim标签体中是整个字符串拼串后的结果
			prefix 前缀，prefix给拼后的字符串加一个前缀
			prefixOverrides 前缀覆盖，去掉整个字符串前面多余的字符
			suffix 后缀，prefix给拼后的字符串加一个后缀
			suffixOverrides 后缀覆盖，去掉整个字符串后面多余的字符
		-->
		<trim prefix="where" prefixOverrides="and" suffixOverrides="and">
 			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null and lastName!=''">
				last_name like #{lastName} and
			</if>
			<if test="email!=null and email.trim()!=''">
				email=#{email} and
			</if>
			<!-- OGNL会进行字符串与数字的转换判断 -->
			<if test="gender==0 or gender==1">
				gender=#{gender}
			</if>
		</trim>
	</select>

	<!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	<select id="getEmpsByConditionChoose" resultType="cn.zyf.mybatis.bean.Employee">
		select * from tbl_employee
		<where>
			<!-- 如果带了id就用id查，如果带了last_name就用last_name查只会进入其中一个 -->
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email=#{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>
	
	<!-- public void  updateEmp(Employee employee); -->
	<update id="updateEmp">
		<!-- Set标签的使用 -->
		update tbl_employee 
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender} 
			</if>
		</set>
		where id=#{id}
		<!-- 
		trim更新
		update tbl_employee 
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender} 
			</if>
		</trim>
		where id=#{id} -->
	</update>
	
	<!-- public List<Employee> getEmpsByConditionForeach(@Param("ids")List<Integer> list); -->
	<select id="getEmpsByConditionForeach" resultType="cn.zyf.mybatis.bean.Employee">
		select * from tbl_employee
		<!-- 
			collcention 指定要遍历的集合
				list类型的参数会特殊处理装在map中，map的key就叫list
			item 将当前遍历出的元素赋值给指定的变量
			separator每个元素之间的分隔符
			open 遍历出多有的结果拼接出一个开始的字符
			close 遍历出多有的结果拼接出一个结束的字符
			index索引 遍历list的时候index就是索引，item就是当前值
						遍历map的时候inde表示的就是map的key，item就是map的值
			
			#{变量名}就能取出变量的值，也就是当前遍历出的元素
		 -->
		 <foreach collection="ids" item="item_id" separator="," 
		 	open="where id in (" close=")">
		 	#{item_id}
		 </foreach>
	</select>
	
	<!-- 批量保存 -->
	<!-- public void  addEmps(@Param("emps")List<Employee> emps); -->
	<!-- MySQL下批量保存：可以foreach遍历 mysql支持values(),(),()语法 -->
	<select id="addEmps">
		insert into tbl_employee(
			<!-- 引用外部定义的sql -->
			<include refid="insertColumn">
				<property name="d_id" value="1"/>
			</include>
		)values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</select>
	
	<!-- 这种方式需要数据库连接属性allowMultiQueries=true -->
	<!-- <insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
			insert into tbl_employee(last_name,email,gender,d_id) 
			values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert> -->
	
	<!-- 两个内置参数
		不止是方法传递过来的参数可以被用来判断取值
		mybatis默认还有两个内置参数
		_parameter 代表整个参数 
			单个参数 _parameter就是这个参数
			多个参数 参数会被封装成一个map _parameter就是代表这个map
			
		_databaseId 如果配置了DatabaseIdProvider标签
			_databaseId就是代表当前数据库的别名
	 -->
	<!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	<select id="getEmpsTestInnerParameter" resultType="cn.zyf.mybatis.bean.Employee">
		<!-- bind可已将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<bind name="_lastName" value="'%'+lastName+'%'"/>
		<if test="_databaseId==mysql">
			select * from tbl_employee
			<if test="_parameter!=null">
				where last_name like #{_lastName}
			</if>
		</if>
		<if test="_databaseId==oracle">
			select * from tbl_employee
		</if>
	</select>
	
	<!-- 
		抽取可重用的sql片段，方便后面的引用 
		1.经常要查询的列名，或者插入用的列名抽取出来方便引用
		2.include来引用已抽取的sql	
		3.include还可以自定义一些property，sql标签内部就能使用
			include-property正确的取值方式：${prop}
				#{不能使用这种方式}
	-->
	<sql id="insertColumn">
		<if test="_databaseId==mysql">
			last_name,email,gender,${d_id},
		</if>
		<if test="_databaseId==oracle">
			select * from tbl_employee
		</if>
	</sql>
</mapper>