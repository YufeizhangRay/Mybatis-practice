单个参数：mybatis不会做特殊处理
	#{参数名}：取出参数值
	
多个参数：mybatis会做特殊处理
	多个参数会被封装成Map，
		key：param1 param2 ....paramN，或者参数的索引也可以
		value：传入的参数值
	#{}就是从map中获取指定的key值

	异常
	org.apache.ibatis.binding.BindingException: 
	Parameter 'id' not found. 
	Available parameters are [0, 1, param1, param2]
	
	操作：
		方法 public Employee getEmpByIdAndLastName(Integer id,String lastName);
		取值：#{id}，#{lastName}
		
命名参数:明确指定封装参数时map的key：@Param("id")
	多个参数会被封装成Map，
		key：使用@Param注解指定的值
		value：传入的参数值
		#{指定的key}取出对应的参数
	
POJO:
如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入POJO
	#{属性名}取出传入的POJO的属性值

Map:
如果多个参数不是业务模型中的数据，没有对应的POJO，为了方便，我们可以传入map
	#{key}取出map中对应的值

TO:
如果多个参数不是业务模型中的数据，但是要经常使用，推荐来编写一个TO(Transfor Object)数据传输对象
page{
	int index;
	int size;
}

===================================思考=============================================
public Employee getEmp(@Param("id")Integer id,String lastName);
	取值：id ==> #{id/param1}  lastName ==> #{param2}
	
public Employee getEmp(Integer id,@Param("e")Employee employee);
	取值：id ==> #{param1}  lastName ==> #{employee.lastName/e.lastName}

##特别注意：如果是Collection(List、Set)类型或者是数组，
			也会特殊处理，也是吧传入的list或数组封装在Map中
				key:Collection(collection),如果是list还可以使用这个key(list)
					数组(array)
public Employee getEmp(List<Integer> ids);
	取值：取出第一个id值:  #{list[0]}  
	
===================================参数的获取=============================================
#{}可以提取map中的值或者POJO中的属性值
${}可以提取map中的值或者POJO中的属性值

区别：
	#{}以预编译的形式，将参数设置到sql语句中，PreparedStatement
	${}取出的值直接拼装在sql语句中，会有安全问题
	大多情况下，我们取参数的值都应该去使用#{}
	
	原生jdbc不支持占位符的地方我们都可以使用${}
	某些情况下，比如分表，按照年份分表拆分
		select * from ${year}_salary where xxx;
		select * from tbl_employee order by ${xxx} 
		
#{}更丰富的用法：
	规定参数的一些规则
	javaType、jdbcType、mode(存储过程)、numericScale、
	resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)
	
	jdbcType在某些情况下被设置：
		在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle(报错)；
		
		JDBC OTHER：无效的类型 因为mybatis对所有的null的映射都是原生JDBC的OTHER类型
		
		由于全局配置中：jdbcTypeForNull=OTHER；Oracle不支持.两种解决方法：
		1.#{email,jdbcType=N}
		2.jdbcTypeForNull=NULL