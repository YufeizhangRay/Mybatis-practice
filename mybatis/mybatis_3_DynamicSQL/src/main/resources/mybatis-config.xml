<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 
		1.可以使用properties标签来引入外部properties配置文件的配置内容
		resource:引入类路径下的资源
		url:引入网络路径或者磁盘路径下的资源
	 -->
	<properties resource="jdbc.properties"> </properties>
	
	<!-- 
		2.settings包含很多重要的设置项
		setting用来设置每一项
		name:设置项名
		value:设置项取值
	 -->
	<settings>
		<setting name="logImpl" value="LOG4J"/>
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		
		<!-- 显示的指定每个我们需要更改的配置的值，即使他是默认的，防止版本更新带来的问题 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		<setting name="aggressiveLazyLoading" value="false"/>
	</settings>
	
	<!-- 3.typeAliases:别名处理器：可以为我们的Java类取别名 -->
 	<typeAliases>
		<!-- typeAlias:为某个Java类取别名
			type:要起别名的类名；默认别名为类名首字母小写：employee 
			alias:指定一个别名 -->
		
		<!-- <typeAlias type="cn.zyf.mybatis.bean.Employee" alias="emp"/> -->
		
		<!-- package为某个包下的所有类批量的起别名
			name:指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名）
			别名不区分大小写 -->
		
		  <package name="cn.zyf.mybatis.bean"/> 
		
		<!-- 批量起别的情况下，使用@Alias注解为类型指定新的别名 -->
	</typeAliases> 
	
	<!-- 
		4.environments:环境们，mybatis可以配置多种环境，default指定某种环境，可以达到快速切换
			environment:配置一个具体的环境信息必须要有两个标签：id代表当前环境的唯一标识
				transactionManager：事务管理器 JDBC|MANAGED
					自定义事务管理器：实现TransactionFactory接口 type指定为全类名
				dataSource：数据源
					type：数据源的类型 UNPOOLED|POOLED|JNDI
						自定义实验DateSourceFactory接口 type是全类名
	 -->
	 
	<environments default="dev_mysql">
	
		<environment id="dev_mysql">
	 		<transactionManager type="JDBC"></transactionManager>
	 		<dataSource type="POOLED">
	 			<property name="driver" value="${jdbc.driverClass}" />
				<property name="url" value="${jdbc.jdbcUrl}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
	 		</dataSource>
	 	</environment>
	 	
	 	<environment id="dev_oracle">
	 		<transactionManager type="JDBC"></transactionManager>
	 		<dataSource type="POOLED">
	 			<property name="driver" value="${jdbc.driverClass}" />
				<property name="url" value="${jdbc.jdbcUrl}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
	 		</dataSource>
	 	</environment>
		
	</environments>
	
	<!-- 
		5.databaseIdProvider:支持多数据库厂商的
			type="DB_VENDOR"
				得到数据库厂商的标识，来执行不同的sql
	 -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>

	<!-- 一定要将我们写好的sql映射文件配置到全局配置文件中 -->
	<!-- 6.mappers 将sql映射注册到全局中 -->
	<mappers>
		<!-- 
			mapper：注册一个sql映射 
				resource：引用类路径下的sql映射文件
				url：引用网络路径或者磁盘路径下的sql映射文件
				class：引用接口
					1.有映射文件，映射文件必须与接口同名，并且放在同一个引用目录下
					2.没有映射文件，所有的sql都是利用注解写在接口上
					推荐：一些重要的，复杂的Dao，我们将sql放在映射文件中，	
						  不重要的，简单的，用注解
		-->
		<!-- <mapper resource="EmployeeMapper.xml" />
		<mapper class="cn.zyf.mybatis.dao.EmployeeMapperAnnotation"/> -->
		<!-- 批量注册 -->
		<package name="cn.zyf.mybatis.dao"/>
	</mappers>
</configuration>